/** Built on 2014-06-06T16:05:44 **/
!function(){"use strict";function Pretend(){function moduleExists(moduleName){try{angular.module(moduleName)}catch(ex){if(/No module/.test(ex)||ex.message.indexOf("$injector:nomod")>-1)return!1}return!0}var mockService=null;return{init:function(moduleName){if(!moduleName)throw new Error("A module name is required when initializing.");if(!moduleExists(moduleName))throw new Error("Unknown module '"+moduleName+"'.");var runner=angular.module("pretend-runner",[moduleName,"pretend"]);runner.run(function(MockService){mockService=MockService}),angular.bootstrap(document.createElement("div"),["pretend-runner"])},mock:function(objectName,options){if(!pretend)throw new Error("Cannot create a mock prior to initialization.");return mockService.getMock(objectName,options)}}}var pretend=angular.module("pretend",[]);window.pretend=new Pretend,pretend.factory("MockService",["$rootScope","$q","$injector",function($rootScope,$q,$injector){function getInstance(objectName){try{return $injector.get(objectName)}catch(ex){throw new Error("Unknown provider '"+objectName+"'. Was everything loaded before calling init()?")}}function initializeMock(objectName){instance=getInstance(objectName),angular.forEach(Object.keys(instance),setProperty)}function getPropertyType(propertyName){var prop=instance[propertyName],isMethod="function"==typeof prop;return isMethod?-1===prop.toString().indexOf(".promise")?"method":"promise":"property"}function getProperty(propertyName){return properties[propertyName]}function setProperty(propertyName,options){var property=getProperty(propertyName);return property||(properties[propertyName]={name:propertyName,type:getPropertyType(propertyName),spy:void 0,value:DEFAULT_RETURN_VALUE}),options&&(properties[propertyName]=angular.extend(properties[propertyName],options)),setPropertyValue(propertyName)}function setPropertyValue(propertyName){function getReturnValue(args){return"function"==typeof property.value?property.value.apply(property.value,args):property.value}var property=getProperty(propertyName);if(!property)throw new Error("The property '"+propertyName+"' is not part of the object '"+instance.name+"'.");return"property"===property.type?mock[property.name]=getReturnValue():(mock[property.name]=null,property.spy=spyOn(mock,property.name).and.callFake(function(){var args=arguments;if("promise"===property.type){var deferred=$q.defer();return property.deferred=function(reject){deferred[reject?"reject":"resolve"](getReturnValue(args)),$rootScope.$digest()},deferred.promise}return getReturnValue(args)})),property}var DEFAULT_RETURN_VALUE=void 0,mock={},properties={},instance=null;return{getMock:function(objectName,options){if(!objectName)throw new Error("The name of the object that needs to be mocked is required.");initializeMock(objectName);var result={mock:mock,returns:function(returnValue){return{"for":function(propertyName){if(!propertyName)throw new Error("The name of the property to set a return value for is required.");var property=setProperty(propertyName,{value:returnValue});return"promise"===property.type?{resolve:function(scope){property.deferred(),scope&&scope.$digest()},reject:function(scope){property.deferred(!0),scope&&scope.$digest()}}:void 0}}},spy:function(propertyName){return properties[propertyName].spy},setup:function(options){angular.forEach(options,function(value,key){angular.forEach(value,function(propertyName){setProperty(propertyName,{type:key})})})}};return options&&result.setup(options),result}}}])}();